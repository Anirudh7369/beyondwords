import cv2
import numpy as np
import mediapipe as mp
import os

mp_hands = mp.solutions.hands
hands = mp_hands.Hands(static_image_mode=False, max_num_hands=2, min_detection_confidence=0.7)

dataset_path = r"C:\Users\ASUS\PycharmProjects\BeyondWords\Final_Dataset"  # Change to your desired dataset path

def ensure_directory_exists(path):
    
    if not os.path.exists(path):
        os.makedirs(path)

def enhance_contrast(image):
    
    clahe = cv2.createCLAHE(clipLimit=3.0, tileGridSize=(8, 8))
    return clahe.apply(image)

def refine_edges(edges):
   
    kernel = cv2.getStructuringElement(cv2.MORPH_ELLIPSE, (3, 3))
    edges = cv2.dilate(edges, kernel, iterations=1)
    edges = cv2.erode(edges, kernel, iterations=1)
    return edges

def create_black_background_with_white_outlines(frame):
    
    
    gray_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    
    edges = cv2.adaptiveThreshold(gray_frame, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C,
                                   cv2.THRESH_BINARY, 11, 2)

    
    inverted_edges = cv2.bitwise_not(edges)

    return inverted_edges

def segment_hand(frame, mode="BlackBackground"):
    
    gray_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    
    enhanced_gray = enhance_contrast(gray_frame)

    
    filtered_gray = cv2.bilateralFilter(enhanced_gray, d=9, sigmaColor=75, sigmaSpace=75)


    edges = cv2.adaptiveThreshold(filtered_gray, 255, cv2.ADAPTIVE_THRESH_GAUSSIAN_C, cv2.THRESH_BINARY, 11, 2)

    
    refined_edges = refine_edges(edges)

    if mode == "BlackBackground":
        return create_black_background_with_white_outlines(frame)

    return None  # Default fallback


cap = cv2.VideoCapture(0)


image_count = {}

while True:
    ret, frame = cap.read()
    if not ret:
        break

   
    frame = cv2.flip(frame, 1)

    
    processed_frame = segment_hand(frame, mode="BlackBackground")

    
    processed_frame_small = cv2.resize(processed_frame, (640, 480))

    
    cv2.imshow("Black Background with White Outlines", processed_frame_small)

    
    key = cv2.waitKey(1) & 0xFF

    if key == ord('q'):  # Quit the loop with 'q'
        print("Exiting...")
        break

    elif chr(key).isalnum():  
        folder_name = chr(key).upper()  
        save_path = os.path.join(dataset_path, folder_name)

        
        ensure_directory_exists(save_path)

        
        if folder_name not in image_count:
            image_count[folder_name] = 0
        image_count[folder_name] += 1

        
        image_filename = f"{folder_name}_{image_count[folder_name]:04d}.jpg"
        full_save_path = os.path.join(save_path, image_filename)
        cv2.imwrite(full_save_path, processed_frame)

        print(f"Saved: {full_save_path}")


cap.release()
cv2.destroyAllWindows()
